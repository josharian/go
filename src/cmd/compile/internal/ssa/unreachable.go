// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package ssa

// unreachable removes blocks generated by unsafe.Unreachable.
func unreachable(f *Func) {
	// if os.Getenv("J") == "" {
	// 	return
	// }
	changed := false
	for _, b := range f.Blocks {
		// TODO: this is a hack.
		// We should probably explicitly represent unsafe.Unreachable
		// with its own block kind.
		if b.Aux != "unreachable" {
			continue
		}
		if b == f.Entry {
			// TODO: what here?
			continue
		}
		for _, e := range b.Preds {
			p := e.b
			if len(p.Succs) != 2 {
				// TODO: is this possible? if so, handle.
				continue
			}
			p.removeSucc(e.i)
			p.Kind = BlockPlain
			p.Likely = BranchUnknown
			p.SetControl(nil)

			// trash b, just in case
			b.Kind = BlockInvalid
			b.Values = nil
			b.Preds = nil
			b.Succs = nil
			changed = true
		}
	}
	if changed {
		f.invalidateCFG()
	}
}
