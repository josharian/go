// autogenerated from gen/AMD64reg.rules: do not edit!
// generated with: cd gen; go run *.go

package ssa

import "math"

var _ = math.MinInt8 // in case not otherwise used
func rewriteValueAMD64reg(v *Value, config *Config) bool {
	switch v.Op {
	case OpAMD64MOVBQZX:
		return rewriteValueAMD64reg_OpAMD64MOVBQZX(v, config)
	}
	return false
}
func rewriteValueAMD64reg_OpAMD64MOVBQZX(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (MOVBQZX y:(LoadReg <t>))
	// cond: is8BitInt(t) && sameReg(v, y)
	// result: y
	for {
		y := v.Args[0]
		if y.Op != OpLoadReg {
			break
		}
		t := y.Type
		if !(is8BitInt(t) && sameReg(v, y)) {
			break
		}
		v.reset(OpCopy)
		v.Type = y.Type
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteBlockAMD64reg(b *Block) bool {
	switch b.Kind {
	}
	return false
}
