// +build ignore

// TODO: docs, header, etc

package main

import (
	"bufio"
	"bytes"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"os/exec"
	"sort"
	"strconv"
	"strings"
)

type linecost struct {
	ops   map[string]int // number of each kind of op encountered for this line
	bytes int            // total instruction size for this line
}

func main() {
	// assumes make.bash has been run
	cmd := exec.Command("go", "build", "-a", "-gcflags=-d=inlcost=1", "std", "cmd")
	cmd.Stdout = ioutil.Discard
	r, w := io.Pipe()
	cmd.Stderr = w
	go func() {
		err := cmd.Run()
		check("running go build", err)
		w.Close()
	}()

	m := make(map[string]linecost)
	opsm := make(map[string]bool) // gather all op names seen

	scan := bufio.NewScanner(r)
	for scan.Scan() {
		b := scan.Bytes()
		if !bytes.HasPrefix(b, []byte("inlcost")) {
			continue
		}
		if bytes.Contains(b, []byte("autogenerated")) {
			continue
		}
		if bytes.Contains(b, []byte("_Cgo_")) {
			continue
		}
		if bytes.Contains(b, []byte("unknown line number")) {
			continue
		}
		fields := strings.Fields(string(b))
		if len(fields) != 4 {
			log.Fatalf("bad inlcost fields %s", b)
		}
		kind := fields[1]
		line := fields[3]
		lc := m[line]
		switch kind {
		case "node":
			if lc.ops == nil {
				lc.ops = make(map[string]int)
			}
			lc.ops[fields[2]]++
			opsm[fields[2]] = true
		case "size":
			n, err := strconv.Atoi(fields[2])
			check("parse inlcost bytes", err)
			lc.bytes += n
		default:
			log.Fatalf("bad inlcost kind %s", kind)
		}
		m[line] = lc
		// fmt.Println(scan.Text())
	}
	check("parsing output", scan.Err())

	var ops []string
	for op := range opsm {
		ops = append(ops, op)
	}
	sort.Strings(ops)
	for _, op := range ops {
		fmt.Print(op, " ")
	}
	fmt.Println("size")

	for _, v := range m {
		// Some lines have code but no recorded ops.
		// See the instrumentation and early exits in inl.go.
		// Not worth the complexity to fix; we have enough data without it.
		if len(v.ops) == 0 {
			continue
		}
		for _, op := range ops {
			fmt.Print(v.ops[op], " ")
		}
		fmt.Println(v.bytes)
	}
}

func check(msg string, err error) {
	if err != nil {
		log.Fatalf("%s: %v", msg, err)
	}
}
